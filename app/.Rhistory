library(scales)
library(googleVis)
library(rvest)
library(xml2)
library(XML)
require(plotly)
require(rpivotTable)
require(plyr)
# CSS switch
mycss = 'Flatly.css'
reg_data <- read.csv(file = "C:/Users/Michael Surace/Desktop/Personal Projects/Inebo/app/data/Reg_Data.csv" )
playoff_data <- read.csv(file = "C:/Users/Michael Surace/Desktop/Personal Projects/Inebo/app/data/Playoff_Data.csv")
projections <- read.csv(file = "C:/Users/Michael Surace/Desktop/Personal Projects/Inebo/app/data/Official_Stats.csv")
#Clean regular season data
Reg_Data_01 <- select(reg_data,Year, Season, Week,Team, Real.Opponent.Name, Outcome, Points.For, Points.Against, Margin.of.Victory)
Reg_Data_01 <- rename(Reg_Data_01,c('Real.Opponent.Name' = 'Opponent_Name'))
#Create indicator if matchup was won
Reg_Data_01$Win_Pct <- ifelse(Reg_Data_01$Outcome == 'Win',1,0)
############################################################
##############  Overall Statistics #########################
############################################################
#Overall Points For
Historical_Pts_For <- aggregate(Points.For ~ Team, data = Reg_Data_01, mean, na.rm = TRUE)
Historical_Pts_For <- rename(Historical_Pts_For,c('Points.For' = 'Overall_Pts_For'))
#Overall Points Against
Historical_Pts_Against <- aggregate(Points.Against ~ Team, data = Reg_Data_01, mean, na.rm = TRUE)
Historical_Pts_Against <- rename(Historical_Pts_Against,c('Points.Against' = 'Overall_Pts_Against'))
#Overall Winning Percentage
Historical_Pts_WinPct <- aggregate(Win_Pct ~ Team, data = Reg_Data_01, mean,na.rm = TRUE)
############################################################
############## Season Statistics ###########################
############################################################
#Best single season - Points for
season_ptsfor <-aggregate(Reg_Data_01$Points.For, by = list(Team = Reg_Data_01$Team, Season = Reg_Data_01$Season),FUN = "mean")
season_ptsfor_best <- season_ptsfor %>%
group_by(Team) %>%
top_n(n = 1, wt = x)
season_ptsfor_best<- rename(select(season_ptsfor_best,Team,x),c('x' = 'Best_Season'))
#Worse single season - Points for
season_ptsfor_worse <- season_ptsfor %>%
group_by(Team) %>%
arrange(x) %>%
slice(1) %>%
ungroup
season_ptsfor_worse<- rename(select(season_ptsfor_worse,Team,x),c('x'='Worse_Season'))
#Best Winning percentage in single season
season_winpct <-aggregate(Reg_Data_01$Win_Pct, by = list(Team = Reg_Data_01$Team, Season = Reg_Data_01$Season),FUN = "mean")
season_winpct_best <- season_winpct %>%
group_by(Team) %>%
top_n(n = 1, wt = x)
season_winpct_best<- rename(select(season_winpct_best,Team,x),c('x'='Best_WinPct'))
season_winpct_best <- distinct(season_winpct_best)
#Worse winning percentage in single season
season_winpct_worse <- season_winpct %>%
group_by(Team) %>%
arrange(x) %>%
slice(1) %>%
ungroup
season_winpct_worse<- rename(select(season_winpct_worse,Team,x),c('x'='Worse_WinPct'))
season_winpct_worse <- distinct(season_winpct_worse)
############################################################
############## Single Game Statistics ######################
############################################################
#Best game
game_ptsfor_best <- Reg_Data_01 %>%
group_by(Team) %>%
top_n(n = 1, wt = Points.For)
game_ptsfor_best<- rename(select(game_ptsfor_best,Team,Points.For),c('Points.For' = 'Best_Week'))
#Worse game
game_ptsfor_worse <- Reg_Data_01 %>%
group_by(Team) %>%
arrange(Points.For) %>%
slice(1) %>%
ungroup
game_ptsfor_worse<- rename(select(game_ptsfor_worse,Team,Points.For),c('Points.For' = 'Worse_Week'))
############################################################
############## Merge Regular Season Statistics #############
############################################################
reg_statistics <- join_all(list(Historical_Pts_For,Historical_Pts_Against,Historical_Pts_WinPct,season_ptsfor_best,
season_ptsfor_worse,season_winpct_best,season_winpct_worse, game_ptsfor_best,game_ptsfor_worse),
by = 'Team', type = 'full')
#Add in win and losses, based on overall win percentage
reg_statistics <- mutate(reg_statistics,Wins = 65*Win_Pct, Losses = 65*(1-Win_Pct))
reg_statistics <- reg_statistics[,c(1,11,12,4,2,3,5:10)]
playoff_data$Playoff_Wins <- ifelse(playoff_data$Outcome != 'Win',0,ifelse(playoff_data$Opponent == "Bye",0,1))
playoff_data$Playoff_Losses <- ifelse(playoff_data$Outcome == "Loss",1,0)
playoff_data$Byes <- ifelse(playoff_data$Opponent == "Bye",1,0)
playoff_data$Championships <- ifelse(playoff_data$Round != "Final",0,ifelse(playoff_data$Outcome == "Win",1,0))
playoff_data$Playoff_Apperances <- ifelse(playoff_data$Round == "Quarter Final",1,0)
#Sum playoff wins, byes, championships, and appearances
playoff_data_01 <- aggregate(cbind(Playoff_Wins,Playoff_Losses,Byes,Championships,Playoff_Apperances,Points.For, Points.Against)~Team, data = playoff_data,sum,na.rm = TRUE)
playoff_data_02 <- mutate(playoff_data_01,Games_Played = Playoff_Wins + Playoff_Losses, Playoffs_Pts_For = Points.For/Games_Played,
Playoffs_Pts_Against= Points.Against/Games_Played)
Playoff_Data_03 <- playoff_data_02[c(1,6,2,3,4,5,10,11)]
full_data = join_all(list(reg_statistics,Playoff_Data_03), by = 'Team', type = 'full')
full_data[is.na(full_data)] <- 0
############################################################
################## Caluclate Rankings ######################
############################################################
rankings <- mutate(full_data, pts_for.rank = ave(Overall_Pts_For,FUN = function(x) rank(x, ties.method = "first")),
winpct.rank = ave(Win_Pct,FUN = function(x) rank(x, ties.method = "first")),
season.rank = ave(Best_Season,FUN = function(x) rank(x, ties.method = "first")),
Final_Rank = pts_for.rank + winpct.rank + season.rank + Playoff_Apperances + Playoff_Wins + Byes + (12*Championships)
)
rankings_final <- rankings[c(1:19,23)]
write.csv(rankings_final,file = "C:/Users/Michael Surace/Desktop/Personal Projects/Inebo/app/data/Rankings.csv", row.names = TRUE)
shiny::runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Inebo/app')
.libPaths()
packages <- c(‘dplyr’, ‘stringr’, ‘lubridate’, ‘haven’, ‘foreign’, ‘reshape2’, ‘tidyr’, ‘purrr’, ‘caret’, ‘RODBC’, ‘randomForest’, ‘parellel’, ‘e1071’, ‘kernlab’)
repo = ‘https://cran.rstudio.com/’
install.packages(pkgs = packages, repos = repo)
packages <- c(‘dplyr’, ‘stringr’, ‘lubridate’, ‘haven’, ‘foreign’, ‘reshape2’, ‘tidyr’, ‘purrr’, ‘caret’, ‘RODBC’, ‘randomForest’, ‘parellel’, ‘e1071’, ‘kernlab’)
library(shiny)
library(shinyjs)
library(shinyFiles)
require(reshape2)
library(dplyr)
library(DT)
library(data.table)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(scales)
library(googleVis)
library(rvest)
library(xml2)
library(XML)
require(plotly)
require(rpivotTable)
require(plyr)
library(R2HTML)
packages <- c(‘dplyr’, ‘stringr’, ‘lubridate’, ‘haven’, ‘foreign’, ‘reshape2’, ‘tidyr’, ‘purrr’, ‘caret’, ‘RODBC’, ‘randomForest’, ‘parellel’, ‘e1071’, ‘kernlab’)
packages <- c('dplyr’, ‘stringr’, ‘lubridate’, ‘haven’, ‘foreign’, ‘reshape2’, ‘tidyr’, ‘purrr’, ‘caret’, ‘RODBC’, ‘randomForest’, ‘parellel’, ‘e1071’, ‘kernlab’)
packages <- c('dplyr', 'stringr', 'lubridate', 'haven', 'foreign', 'reshape2', 'tidyr', 'purrr', 'caret', 'RODBC', 'randomForest', 'parellel', 'e1071', 'kernlab')
packages <- c('dplyr', 'stringr', 'lubridate', 'haven', 'foreign', 'reshape2', 'tidyr', 'purrr', 'caret', 'RODBC', 'randomForest', 'parellel', 'e1071', 'kernlab')
repo = ‘https://cran.rstudio.com/’
repo = 'https://cran.rstudio.com/'
install.packages(pkgs = packages, repos = repo)
install.packages(pkgs = packages, repos = repo)
repo = 'https://cran.rstudio.com/'
.libPaths()
.libPaths()
library(Rcpp)
install.packages("Rcpp")
library(caret)
install.packages("pbkrtest")
install.packages("installr")
library(installr)
updateR()
install.packages(doParallel)
install.packages("doParallel")
.libPaths()
?trainControl
library(caret)
?trainControl
install.packages("DMwR")
install.packages("ROSE")
?classProbs
??classProbs
?trainControl
library(shiny)
library(shinyjs)
library(shinyFiles)
require(reshape2)
library(dplyr)
library(DT)
library(data.table)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(scales)
library(googleVis)
library(rvest)
library(xml2)
library(XML)
require(plotly)
require(rpivotTable)
require(plyr)
library(R2HTML)
library(caret)
?caret
?varImp
varImp.randomForest
library("randomForest")
library(randomForest)
install.packages("randomForest")
varImp.randomForest
?varImp.randomForest
varImp.randomForest
install.packages("party")
.libPaths()
?roc
?ROC
install.packages("pROC")
library(pROC)
?roc
shiny::runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("shinyjs")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("shinyFiles")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
library(DT)
install.packages("DT")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
library(data.table)
install.packages("data.table")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("ggthemes")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("googleVis")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("rvest")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("XML")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("R2HTML")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
install.packages("markdown")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
shiny::runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
library(rsconnect)
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
shiny::runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
terminateApp("inebo")
terminateApp()
terminateApp("inebo")
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
terminateApp("inebo")
terminateApp("inebo")
shiny::runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
proj <- read.csv(file = "data/2017proj.csv")
getwd()
runApp('C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app')
getwd()
setwd("C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/Inebo/app")
getwd()
proj <- read.csv(file = "data/2017proj.csv")
View(proj)
View(proj)
runApp()
team_list[3]
TeamNeeds <- matrix(nrow = 12, ncol = 16)
View(TeamNeeds)
NumTeams = 10
NumTeams = 12
TeamNeeds <- matrix(nrow = NumTeams, ncol = 16)
teamnames <- as.character(team_list)
teamnames[3]
for(i in 1:NumTeams){
TeamNeeds[i,1] <- teamnames[i]
}
View(TeamNeeds)
shiny::runApp()
runApp()
homeruns <- read.csv(file = "C:/Users/Michael Surace/Desktop/Personal Projects/Fantasy Sports/2017 Homerun Derby/Teams.csv")
View(homeruns)
install.packages("PitchRx")
Yes
install.packages("pitchRx")
library(pitchRx)
dat <- scrape(start = "2016-06-01", end = "2016-06-01")
data <- data.frame(dat)
picth <- data.frame(dat["Pitch"])
picth <- data.frame(dat[["Pitch"])
picth <- data.frame(dat[["Pitch"]])
picth <- data.frame(dat[["pitch"]])
View(picth)
head[dat]
names(dat)
atbat <- data.frame(dat[["atbat"]])
View(atbat)
action <- data.frame(dat[["action"]])
View(action)
?xml2
??xml2
shiny::runApp()
runApp()
runApp()
install.packages("Leaflet")
install.packages("leaflet")
install.packages("leaflet")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12) %>% addTiles()
library(shiny)
library(shinyjs)
library(shinyFiles)
library(rsconnect)
library(reshape2)
require(plyr)
library(dplyr)
library(DT)
library(data.table)
library(ggplot2)
library(ggthemes)
library(scales)
library(googleVis)
library(rvest)
library(xml2)
library(XML)
library(plotly)
library(DT)
library(tidyr)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12) %>% addTiles()
library(leaflet)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12) %>% addTiles()
print(m)
m <- leaflet() %>% setView(lng = -77.0363, lat = 38.8951, zoom = 12) %>% addTiles()
print(m)
shiny::runApp()
runApp()
library(rsconnect)
terminateApp("inebo")
shiny::runApp()
runApp()
install.packages("baseballr")
library("baseballr")
install.packages("openWAR")
data <- read.csv(file = "C:/Users/Michael Surace/Desktop/7A_Purchase.csv")
View(data)
library(shiny)
library(shinyjs)
library(shinyFiles)
library(rsconnect)
library(reshape2)
require(plyr)
library(dplyr)
library(DT)
library(data.table)
library(ggplot2)
library(ggthemes)
library(scales)
library(googleVis)
library(rvest)
library(xml2)
library(XML)
library(plotly)
library(DT)
library(tidyr)
library(stringr)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount))
data$Purchase_Amount <- as.numeric(as.character(gsub(",","",sub("\\$","",data$Purchase_Amount))))
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount))
data$Improper_Payment_Amount <- as.numeric(as.character(gsub(",","",sub("\\$","",data$Improper_Payment_Amount))))
data$Purchase_Amount <- as.numeric(data$Purchase_Amount)
View(data)
data$Improper_Payment_Amount <- as.numeric(data$Improper_Payment_Amount)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount))
View(data_sum)
data$Improper_Payment_Amount[is.na()] <- 0
data$Improper_Payment_Amount[is.na(data$Improper_Payment_Amount)] <- 0
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount))
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount)) %>%
filter(Svc_Center != "")
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount),
Total_Pop_Pur_Amt_Strata = mean(Total_Pop_Pur)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata)
data$Total_Pop_Pur <- as.numeric(as.character(gsub(",","",sub("\\$","",data$Total_Pop_Pur))))
data$Total_Pop_Pur <- as.numeric(data$Total_Pop_Pur)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount),
Total_Pop_Pur_Amt_Strata = mean(Total_Pop_Pur)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata)
data$Pop_Pur_Amt <- as.numeric(as.character(gsub(",","",sub("\\$","",data$Pop_Pur_Amt))))
data$Pop_Pur_Amt <- as.numeric(data$Pop_Pur_Amt)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata)
data_sum <- data %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amount),Total_IP_Amt_Strata = sum(Improper_Payment_Amount),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
write.csv(data_sum, file = "C:/Users/Michael Surace/Desktop/7a_purchase_loss.csv")
data <- read.csv(file = "C:/Users/Michael Surace/Desktop/7A_Purchase_Calculations.csv")
data$IP_Amt[is.na(data$IP_Amt)] <- 0
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
filter(Svc_Center != "") %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
View(data_sum)
write.csv(data_sum, file = "C:/Users/Michael Surace/Desktop/7a_purchase_loss.csv")
data <- read.csv(file = "C:/Users/Michael Surace/Desktop/7A_Purchase_Calculations.csv")
data$IP_Amt[is.na(data$IP_Amt)] <- 0
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt),
Total_Pop_Pur_Amt_Strata = mean(Pop_N)) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
write.csv(data_sum, file = "C:/Users/Michael Surace/Desktop/7a_purchase_loss.csv")
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt)/n())
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt)/n()) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt)/n()) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(IP_Amt_Strata = sum(IP_wgt) /n())%>%
summarize (sumamt = sum (IP_Amt_Strata))
View(data_sum)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(IP_Amt_Strata = sum(IP_wgt) /n())%>%
ungroup() %>%
summarize (sumamt = sum (IP_Amt_Strata))
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(IP_Amt_Strata = sum(IP_wgt) /n())
View(data_sum)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(IP_Amt_Strata = sum(IP_wgt) /n())%>%
ungroup() %>%
summarize (sumamt = sum (IP_Amt_Strata))
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
data <- read.csv(file = "C:/Users/Michael Surace/Desktop/7A_Purchase_Calculations.csv")
data$IP_Amt[is.na(data$IP_Amt)] <- 0
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
data_sum <- data %>%
mutate(IP_wgt = IP_Amt*SamplingWeight) %>%
group_by(Svc_Center) %>%
summarize(Total_Purchase_Amt_Strata = sum(Purchase_Amt),Total_IP_Amt_Strata = sum(IP_wgt)/n(),
Total_Pop_Pur_Amt_Strata = mean(Pop_Pur_Amt)) %>%
mutate(IP_Rate_Strata = Total_IP_Amt_Strata/Total_Purchase_Amt_Strata, Pop_Est_IP_Amt = IP_Rate_Strata*Total_Pop_Pur_Amt_Strata)
data <- read.csv(file = "C:/Users/Michael Surace/Desktop/7A_Purchase_Calculations.csv")
data$IP_Amt[is.na(data$IP_Amt)] <- 0
df %>%
mutate(IP_Amt = ifelse(is.na(IP_Amt),0, IP_Amt),IP_wgt = IP_Amt/Prob_Loan_Selection) %>%
group_by(Svc_Center) %>%
dplyr::summarize(IP_Amt_Strata = sum(IP_wgt)/n()) %>%
ungroup() %>%
dplyr::summarize(tot = sum(IP_Amt_Strata))
df %>%
mutate(IP_wgt = IP_Amt/Prob_Loan_Selection) %>%
group_by(Svc_Center) %>%
dplyr::summarize(IP_Amt_Strata = sum(IP_wgt)/n()) %>%
ungroup() %>%
dplyr::summarize(tot = sum(IP_Amt_Strata))
library(dplyr)
df %>%
mutate(IP_wgt = IP_Amt/Prob_Loan_Selection) %>%
group_by(Svc_Center) %>%
dplyr::summarize(IP_Amt_Strata = sum(IP_wgt)/n()) %>%
ungroup() %>%
dplyr::summarize(tot = sum(IP_Amt_Strata))
data_sum <- data %>%
mutate(IP_wgt = IP_Amt/Prob_Loan_Selection) %>%
group_by(Svc_Center) %>%
dplyr::summarize(IP_Amt_Strata = sum(IP_wgt)/n()) %>%
ungroup() %>%
dplyr::summarize(tot = sum(IP_Amt_Strata))
shiny::runApp()
